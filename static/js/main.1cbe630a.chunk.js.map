{"version":3,"sources":["components/CurrencySelector.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["ValueSelector","styled","div","ValueInput","input","CurrencySymbol","CurrencySelecter","select","Selector","CurrencySelector","id","value","currency","setCurrency","setTargetValue","currencyOrder","currencyData","console","log","onChange","e","target","name","map","currencyOption","index","currencyID","currencyName","newValue","replace","type","Swapper","Container","App","useState","SEK","currencySymbol","setCurrencyData","setCurrencyOrder","errorMessage","setErrorMessage","useEffect","fetch","then","response","json","data","currencyOrderName","currencyOrderID","keyOrder","Object","keys","results","sort","key","push","a","b","localeCompare","sourceCurrency","setSourceCurrency","sourceValue","setSourceValue","targetCurrency","setTargetCurrency","targetValue","exchangeRate","setExchangeRate","calculateExchange","newExchange","catch","onClick","oldSourceCurrency","swapCurrencies","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1cbe630a.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components';\n\n\ninterface IProps {\n    id: string\n    value: number\n    currency: string\n    setCurrency: Function\n    setTargetValue: Function\n    currencyOrder: Array<Array<string>>\n    currencyData: Object\n}\n\n\nconst CurrencySelector = ( { id, value, currency, setCurrency, setTargetValue, currencyData, currencyOrder} : IProps) => {\n    \n\n    //currencyOrder is  an array [[\"SEK\", \"Swedish Krona\"], [\"USD\", \"American dollar\"],...] or [[\"Swedish Krona\", \"SEK\"], [\"American dollar\", \"USD\"],...], ordered alphabetically by currency name\n    //currencyData is an object {\"SEK\"{currencyName: Swedish Krona, currencySymbol: kr, currencyID: SEK},...}\n\n    //Should maybe include currencySymbol in the currencyOrder array as well and not use both currencyOrder and currencyData?\n    \n    \n\n    return (\n       \n        <>\n        {console.log(\"CurrencySelector\", id, \">> Render\")}\n        <Selector key ={id+\"C\"}>\n            \n            <CurrencySelecter key = {id+\"CA\"} value={currency} onChange={(e: { target: { value: string; }; }) => setCurrency(e.target.value)} name=\"currency\" id=\"currency\">\n                {       \n                        //iterates over all the currencies and adds an option for each\n                        currencyOrder.map(((currencyOption: Array<string>, index: number) => {\n                        const currencyID = currencyOption[0];\n                        const currencyName = currencyOption[1];\n                        return (\n                            // currencyData[currencyOption[0]][\"currencyName\"] can also be written as currencyOption[1]\n                            //<option key={id+\"CA\"+index}value={currencyOption[0]}>{currencyData[currencyOption[0]] ? `${currencyData[currencyOption[0]][\"currencyName\"]}  (${currencyOption[0]})` : \"N/A\"}</option>);' // NAME (ID)\n                            <option key={id+\"CA\"+index} value={currencyID}>{currencyID ? `${currencyID} (${currencyName})` : \"N/A\"}</option>); // ID (NAME)\n                    }))\n                } \n\n            </CurrencySelecter>\n            <ValueSelector key ={id+\"D\"}>\n                {console.log(\"ValueSelector\", id, \">> Render\")}\n                {/* Updates the value when writing, also replaces non-numbers with empty string to not allow non-numbers */}\n                <ValueInput key = {id+\"DA\"} value = {value} onChange = {(e: { target: { value: string; }; }) => {const newValue = e.target.value.replace(/[^0-9.]/g, '').replace(/(\\..*)\\./g, '$1'); setTargetValue(newValue)}} type=\"text\" name=\"textinputter\"/>\n                <CurrencySymbol key ={id+\"DB\"} >\n                {/* <span>{currencyData[currency] && currencyData[currency][\"currencySymbol\"] ? currencyData[currency][\"currencySymbol\"] : currency}</span> */}\n                <span>{currency}</span>\n                </CurrencySymbol>\n            </ValueSelector>\n\n        </Selector> \n        </>\n    )\n\n};\n\nconst ValueSelector = styled.div`\n    background-color: #ffffff;\n    align-items: center;\n    display: flex;\n    width: 100%;\n    height: 2.25em;\n`;\nconst ValueInput = styled.input`\n    background-color: transparent;\n    font-size: 16px;\n    border: none;\n    width: 100%;\n    padding: 0.5em;\n    padding-left: 0.75em;\n`;\nconst CurrencySymbol = styled.div`\n    background-color: rgba(0, 0, 0, 0.05);\n    font-size: 16px;\n    height: 100%;\n    text-align: center;\n    //padding: 0.5em;\n    font-weight: 900;\n    width: 3.5em;\n    \n    >span {\n        display: inline-block;\n        vertical-align: middle;\n        line-height: 210%; //Centering the symbol a bit\n    }\n`;\nconst CurrencySelecter = styled.select`\n    background-color: #ffffff;\n    font-size: 16px;\n    padding: 0.5em;\n    border: none;\n    appearance: button;\n    height: 2.25em;\n    width:100%;\n    :hover {\n        color: orange;\n    }\n    margin-bottom: 1em;\n`;\nconst Selector = styled.div`\n    font-size: 16px;\n    width: 100%\n`;\n\nexport default CurrencySelector","import React, { useState, useEffect } from 'react';\nimport CurrencySelector from './components/CurrencySelector';\nimport styled from 'styled-components';\n\n    // API KEY: 4babd9e1aa4a8bf230ae79e747643be7 fixer.io\n    // API KEY: 87b4f9fb2be631bed0c8 currcon\n\n\nconst App = () => {\n\n    const [currencyData, setCurrencyData] = useState([{SEK: {\n      currencyName: \"Swedish Krona\",\n      currencySymbol: \"kr\"\n    }}])\n    const [currencyOrder, setCurrencyOrder] = useState([[\"SEK\"],[\"Swedish Krona\"]])\n\n    const [errorMessage, setErrorMessage] = useState()\n\n    const getCurrencies = () => {\n\n      fetch(`https://free.currconv.com/api/v7/currencies?&apiKey=87b4f9fb2be631bed0c8`).then(response => response.json()).then(data => {\n        const json = data;\n\n        let currencyOrderID : Array<Array<string>> = []; \n        let currencyOrderName : string[][] = []; \n          \n        //Getting all the keys, turning into an array to be able to sort.\n        const keyOrder : Array<string> = Object.keys(json.results).sort();\n  \n        //Sorting based on NAME of currency\n        for (var key in keyOrder) {\n          const currencyName : string = json.results[keyOrder[key]].currencyName\n          currencyOrderID.push([keyOrder[key], currencyName]);\n        }\n        currencyOrderName = [...currencyOrderID].sort((a, b) =>  a[1].localeCompare(b[1]));\n        \n  \n         setCurrencyData(json.results);\n         // setCurrencyOrder(currencyOrderID);\n         setCurrencyOrder(currencyOrderName);\n    });\n\n\n    } \n\n    // async/await function of the above, gives a \"Uncaught ReferenceError: regeneratorRuntime is not defined\" error\n  /*  const getCurrencies = async () => {\n      const result = await fetch(`https://free.currconv.com/api/v7/currencies?&apiKey=87b4f9fb2be631bed0c8`);\n      let json;\n      let currencyOrderID = []; \n      let currencyOrderName = []; \n      if (result) {\n        json = await result.json();\n        \n        //Getting all the keys, turning into an array to be able to sort.\n        const keyOrder = Object.keys(json.results).sort();\n        //Sorting based on NAME of currency\n        for (var key in keyOrder) {\n          let newCurrencyName = json.results.[keyOrder[key]].currencyName\n          currencyOrderID.push([keyOrder[key], newCurrencyName]);\n        }\n        currencyOrderName = [...currencyOrderID].sort((a, b) =>  a[1].localeCompare(b[1]));\n      }\n       setCurrencyData(json.results);\n       //setCurrencyOrder(currencyOrderID);\n       setCurrencyOrder(currencyOrderName);\n    } */\n\n      //Is called once when the page is loaded, fetching currencies (ID, name, symbol)\n    useEffect(() => {\n      getCurrencies();\n    }, [])\n\n    const [sourceCurrency, setSourceCurrency] = useState(\"SEK\");\n    const [sourceValue, setSourceValue] = useState(1);\n\n    const [targetCurrency, setTargetCurrency] = useState(\"EUR\")\n    const [targetValue, setTargetValue] = useState(0.1);\n\n    const [exchangeRate, setExchangeRate] = useState(0.1); //Exchange rate from source to target currency\n\n    //Fetches adn sets the current exchangerate when either currency is updated\n    useEffect(() => {\n        calculateExchange();\n    }, [sourceCurrency, targetCurrency])\n\n\n    const calculateExchange = () => {\n        \n      fetch(`https://free.currconv.com/api/v7/convert?q=${sourceCurrency}_${targetCurrency}&compact=ultra&apiKey=87b4f9fb2be631bed0c8`).then(response => response.json()\n      .then(json => {\n\n        const newExchange = (json[`${sourceCurrency}_${targetCurrency}`])\n        setExchangeRate(newExchange);\n        setTargetValue(sourceValue*newExchange)\n            \n      }).catch(e => setErrorMessage(e)))\n\n    }\n\n      //Async/Await function of the above, doesn't work balblabla \n/*    const calculateExchange = async () => {\n        \n      const result = await fetch(`https://free.currconv.com/api/v7/convert?q=${sourceCurrency}_${targetCurrency}&compact=ultra&apiKey=87b4f9fb2be631bed0c8`)\n      \n      let json;\n      if (result) {\n        json = await result.json();\n        const newExchange = (json.[`${sourceCurrency}_${targetCurrency}`])\n        setExchangeRate(newExchange);\n        setTargetValue(sourceValue*newExchange)\n          \n      } else {\n        console.log(\"EXCHANGERATE FETCH FAIL\");\n      }\n    } */\n\n    const updateFromSource = (value : number) => {\n        setSourceValue(value)\n        setTargetValue(value*exchangeRate)\n    }\n\n    const updateFromTarget = (value : number) => {\n        setSourceValue(value/exchangeRate)\n        setTargetValue(value)\n    }\n\n    const swapCurrencies = () => {\n      const oldSourceCurrency = sourceCurrency;\n      const oldTargetCurrency = targetCurrency;\n      setSourceCurrency(oldTargetCurrency);\n      setTargetCurrency(oldSourceCurrency);\n    }\n\n    return (\n        <>\n      \n        <Container>\n          <CurrencySelector  \n            key = \"A\" \n            id = \"A\" \n            value={sourceValue} \n            currency={sourceCurrency} \n            setCurrency={setSourceCurrency}\n            setTargetValue={updateFromSource}\n            currencyData={currencyData}\n            currencyOrder={currencyOrder}\n          />\n\n          <Swapper type=\"button\" onClick={e => swapCurrencies()} value=\"⇔\"/>\n          \n          <CurrencySelector  \n            key = \"B\" \n            id = \"B\"\n            value={targetValue} \n            currency={targetCurrency} \n            setCurrency={setTargetCurrency} \n            setTargetValue={updateFromTarget} \n            currencyData={currencyData}\n            currencyOrder={currencyOrder}\n\n          />\n\n        </Container>\n\n        <div>{errorMessage}</div>\n\n\n        </>\n    )\n}\n\nconst Swapper = styled.input`\n  background-color: transparent;\n  font-size: 35px;\n  line-height: 0px;\n  height: 31.5px;\n  width: 25%;\n  border: none;\n  :hover {\n    color: orange;\n    font-weight:900;\n  }\n  @media (max-width: 850px) {\n    margin-bottom: 0.25em;\n    padding: 0.125em;\n  }\n`;\nconst Container = styled.div`\n \n  background-color: #cacaca;\n  border: solid 1px;\n  padding: 1.5em;\n  margin: auto;\n  margin-top: 2em;\n  justify-content: space-between;\n  border-radius: 0.3em;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  @media (min-width: 772px) {\n    display: flex;\n    flex-direction: row;\n    width: 700px;\n   }\n  \n`;\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}